// This file was generated by Mendix Modeler.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package twofactorauth.actions;

import java.util.HashMap;
import com.mendix.core.Core;
import com.mendix.core.CoreException;
import com.mendix.externalinterface.connector.RequestHandler;
import com.mendix.logging.ILogNode;
import com.mendix.m2ee.api.IMxRuntimeRequest;
import com.mendix.m2ee.api.IMxRuntimeResponse;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import com.mendix.systemwideinterfaces.core.ISession;
import com.mendix.systemwideinterfaces.core.IUser;
import com.mendix.webui.CustomJavaAction;

/**
 * Exposes a request handler at /magiclink that takes a GET parameters:
 *  - guid
 * 
 * If the credentials are valid, the system checks to see if two-factor auth (TFA) is enabled. If enabled, a token is sent to the user and a 202 response is returned to the browser. If disabled, the user is logged in and a 303 redirect to /index.html with cookies are returned to the browser.
 *  
 * Exposes a request handler at /magiclink that takes POST parameters:
 * - guid
 * - token
 * 
 * If the credentials are valid, the system validates the guid and token, and if valid, a 303 redirect to /index.html with cookies are returned to the browser.
 */
public class StartMagicLinkLoginHandler extends CustomJavaAction<java.lang.Boolean>
{
	private java.lang.String SendTFAToken;
	private java.lang.String VerifyTFAToken;
	private java.lang.String CheckTFAActive;
	private java.lang.String ValidateGUID;
	private java.lang.String ResetTFAToken;

	public StartMagicLinkLoginHandler(IContext context, java.lang.String SendTFAToken, java.lang.String VerifyTFAToken, java.lang.String CheckTFAActive, java.lang.String ValidateGUID, java.lang.String ResetTFAToken)
	{
		super(context);
		this.SendTFAToken = SendTFAToken;
		this.VerifyTFAToken = VerifyTFAToken;
		this.CheckTFAActive = CheckTFAActive;
		this.ValidateGUID = ValidateGUID;
		this.ResetTFAToken = ResetTFAToken;
	}

	@Override
	public java.lang.Boolean executeAction() throws Exception
	{
		// BEGIN USER CODE
		MAGICLINKLOGIN.info("Starting up Magic Link login handler...");
		Core.addRequestHandler("magiclink", new TokenRequestHandler());
		MAGICLINKLOGIN.info("Starting up Magic Link login handler.....DONE");
		return true;		
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 */
	@Override
	public java.lang.String toString()
	{
		return "StartMagicLinkLoginHandler";
	}

	// BEGIN EXTRA CODE
	private static final String XAS_ID = "XASID";
	protected static ILogNode MAGICLINKLOGIN = Core.getLogger("MagicLinkLogin");	
	
class TokenRequestHandler extends RequestHandler{
		
		@Override
		public void processRequest(IMxRuntimeRequest request,
				IMxRuntimeResponse response, String arg2) throws Exception 
		{
			if ("POST".equals(request.getHttpServletRequest().getMethod())) {	
				handlePostRequest(request, response);
			} else if ("GET".equals(request.getHttpServletRequest().getMethod())) {
				handleGetRequest(request, response);
			} else {
				response.setStatus(405);
			}
		}

		private void handlePostRequest(IMxRuntimeRequest request, IMxRuntimeResponse response) {
			try{
				ISession oldSession = this.getSessionFromRequest(request);
				String guid = request.getParameter("guid");
				String token = request.getParameter("token");
				IContext sysContext = Core.createSystemContext();
				
				if(guid != null && token != null) {
					HashMap<String, Object> params = new HashMap<String, Object>();
					params.put("guid", guid);
					IMendixObject userIMendixObj = Core.execute(sysContext, ValidateGUID, true, params);
					system.proxies.User userProxyObj = system.proxies.User.initialize(sysContext, userIMendixObj);
					
					if (userProxyObj != null) {
						String user = userProxyObj.getName();
						IUser userObj = Core.getUser(sysContext, user);
												
						if (!userObj.isActive()) {
							response.setStatus(401);
							MAGICLINKLOGIN.info(user + " tried to log in, but is inactive.");
						} else if (userObj.isBlocked()) {
							response.setStatus(401);
							MAGICLINKLOGIN.info(user + " is currently blocked due to previous failed login attempts");	
						} else {					
							//verify token
							HashMap<String, Object> verifyTokenParams = new HashMap<String, Object>();
							verifyTokenParams.put("user", user);
							verifyTokenParams.put("token", token);
							boolean validToken = Core.execute(sysContext, VerifyTFAToken, true, verifyTokenParams);
							
							if (validToken) {
								//remove the token
								HashMap<String, Object> removeTokenParams = new HashMap<String, Object>();
								removeTokenParams.put("user", user);
								Core.execute(sysContext, ResetTFAToken, true, removeTokenParams);
								
								//now actually log in
								MAGICLINKLOGIN.info("UserName: " + user + " is attempting two-factor login");
								this.performLogin(user, response, oldSession, sysContext);
							} else {
								response.setStatus(401);
								MAGICLINKLOGIN.info(user + " provided an invalid token");
							}
						}
					} else {
						response.setStatus(401);
						MAGICLINKLOGIN.info(guid + " failed to authenticate");
					}
				} else {
					response.setStatus(400);
					MAGICLINKLOGIN.info("Bad request, magic link POST requires a guid and a token");
				}
			}
			catch (Exception e){
				response.setStatus(500);
				MAGICLINKLOGIN.info(e.getMessage());
			}
		}
		
		private void handleGetRequest(IMxRuntimeRequest request, IMxRuntimeResponse response) {
			try{
				ISession oldSession = this.getSessionFromRequest(request);
				String guid = request.getParameter("guid");
				IContext sysContext = Core.createSystemContext();
				
				if(guid != null) {
					HashMap<String, Object> params = new HashMap<String, Object>();
					params.put("guid", guid);
					IMendixObject userIMendixObj = Core.execute(sysContext, ValidateGUID, true, params);
					system.proxies.User userProxyObj = system.proxies.User.initialize(sysContext, userIMendixObj);
					
					if (userProxyObj != null) {
						String user = userProxyObj.getName();
						IUser userObj = Core.getUser(sysContext, user);
						
						//Check if TFA is enabled
						HashMap<String, Object> checkTFAParams = new HashMap<String, Object>();
						checkTFAParams.put("user", user);
						boolean useTFA = Core.execute(sysContext, CheckTFAActive, true, checkTFAParams);
						
						if (useTFA) {
							//Send a token
							HashMap<String, Object> sendTokenParams = new HashMap<String, Object>();
							sendTokenParams.put("user", user);
							boolean tokenSent = Core.execute(sysContext, SendTFAToken, true, sendTokenParams);
							if (tokenSent) {
								response.setStatus(303);
								response.addHeader("Location", "./login2.html?guid=" + guid);
							} else {
								response.setStatus(503);							
								MAGICLINKLOGIN.error("Unable to send TFA Token for user: " + user + ". The microflow " + SendTFAToken + " returned false.");
							}
						} else {
							//no TFA, just log in
							if (!userObj.isActive()) {
								response.setStatus(401);
								MAGICLINKLOGIN.info(user + " tried to log in, but is inactive.");
							} else if (userObj.isBlocked()) {
								response.setStatus(401);
								MAGICLINKLOGIN.info(user + " is currently blocked due to previous failed login attempts");	
							} else {
							MAGICLINKLOGIN.info("UserName: " + user + " is attempting login");
							performLogin(user, response, oldSession, sysContext);
							}
						}
					} else {
						response.setStatus(401);
						MAGICLINKLOGIN.info(guid + " : GUID not found or invalid.");
					}
				} else {
					response.setStatus(400);
					MAGICLINKLOGIN.info("Bad request, magic link GET requires a guid");
				}				
			}
			catch (Exception e){
				response.setStatus(500);
				MAGICLINKLOGIN.info(e.getMessage());
			}
		}
		
		private void setCookies(IMxRuntimeResponse response, ISession session) {
			response.addCookie(XAS_SESSION_ID, session.getId().toString(),  "/", "", -1, true);
			response.addCookie(XAS_ID, "0."+Core.getXASId(),"/", "", -1, true);			 
		}
				
		private void performLogin(String user, IMxRuntimeResponse response, ISession oldSession, IContext systemContext)
				throws CoreException {
			String oldSessionId = "";
			if (oldSession != null) {
				oldSessionId = oldSession.getId().toString();
			}

			IUser userObj = Core.getUser(systemContext, user);
			ISession newSession = Core.initializeSession(userObj, oldSessionId);
			
			if (oldSession != null) {
				oldSession.destroy();
			}
			
			MAGICLINKLOGIN.info(user + " has been successfully logged into the application");

			response.setStatus(303);
			response.addHeader("Location", "./index.html");
			setCookies(response, newSession);
		}		
		
		private void logFailedLogin(IContext sysContext, IUser userObj) {
			IMendixObject userMxObj = userObj.getMendixObject();
			system.proxies.User userEntity = system.proxies.User.initialize(sysContext, userMxObj);
			int newFailedLogins = userEntity.getFailedLogins() + 1;
			MAGICLINKLOGIN.info(userObj.getName() + " login failed. This is failed attempt: " + newFailedLogins);			

			try {
				userEntity.setFailedLogins(newFailedLogins);
				
				if(newFailedLogins >= 3) {
					userEntity.setBlocked(true);
					MAGICLINKLOGIN.info(userObj.getName() + " is blocked for 5 minutes");
				}				
				userEntity.commit(sysContext);
			} catch (Exception e) {
				MAGICLINKLOGIN.error("Unable to commit failed login attempts to user object: " + userObj.getName());
			}

		}
	}
	// END EXTRA CODE
}
